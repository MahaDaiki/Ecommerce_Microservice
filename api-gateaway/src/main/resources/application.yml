spring:
  application:
    name: api-gateway
  config:
    import: configserver:http://localhost:8888
  cloud:
    vault:
      enabled: false
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: user-service
          uri: lb://USER-MANAGEMENT
          predicates:
            - Path=/api/users/**
          filters:
            - RewritePath=/api/users/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: userService
                fallbackUri: forward:/fallback/user
            # Propagation du token d'authentification
            - AddRequestHeader=Authorization, ${request.headers.Authorization}

        - id: product-service
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/v1/products/**
          filters:
            - RewritePath=/api/v1/products/(?<segment>.*), /${segment}
            - name: CircuitBreaker
              args:
                name: productService
                fallbackUri: forward:/fallback/product
            - AddRequestHeader=Authorization, ${request.headers.Authorization}

        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/**
          filters:
            - RewritePath=/api/orders/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: orderService
                fallbackUri: forward:/fallback/order
            - AddRequestHeader=Authorization, ${request.headers.Authorization}

        - id: payment-service
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/**
          filters:
            - RewritePath=/api/payments/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: paymentService
                fallbackUri: forward:/fallback/payment
            - AddRequestHeader=Authorization, ${request.headers.Authorization}

        - id: notification-service
          uri: lb://NOTIFICATION-SERVICE
          predicates:
            - Path=/api/notifications/**
          filters:
            - RewritePath=/api/notifications/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: notificationService
                fallbackUri: forward:/fallback/notification
            - AddRequestHeader=Authorization, ${request.headers.Authorization}

    # Configuration pour se connecter au Config Server
    config:
      uri: http://localhost:8888
      fail-fast: true
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1

# Configuration Eureka pour le service discovery
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true

# Configuration pour Resilience4j (Circuit Breaker)
resilience4j:
  circuitbreaker:
    instances:
      userService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 2s
      productService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 2s
      orderService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 2s
      paymentService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 2s
      notificationService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 2s
  timelimiter:
    instances:
      userService:
        timeoutDuration: 4s
      productService:
        timeoutDuration: 4s
      orderService:
        timeoutDuration: 4s
      paymentService:
        timeoutDuration: 4s
      notificationService:
        timeoutDuration: 4s

# Configuration du logging pour Sleuth et Zipkin
spring.zipkin:
  base-url: http://localhost:9411
  sender:
    type: web
spring.sleuth:
  sampler:
    probability: 1.0

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

server:
  port: 8090